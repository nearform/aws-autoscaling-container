'use strict';

var aws = require('aws-sdk');
var config =  require('./config.json');
var autoscaling = new aws.AutoScaling(config);
var launchName = 'lc-sudc-42';
var groupName = 'ag-sudc-42';

var params = {
  LaunchConfigurationName: launchName,
  /*BlockDeviceMappings: [
    {
    DeviceName: 'STRING_VALUE', //required
    Ebs: {
      DeleteOnTermination: true || false,
      Iops: 0,
      SnapshotId: 'STRING_VALUE',
      VolumeSize: 0,
      VolumeType: 'STRING_VALUE'
    },
    NoDevice: true || false,
    VirtualName: 'STRING_VALUE'
  }
  ],
  */
  ImageId: 'ami-4b90b27b',  // this need to be configurable

  /*InstanceMonitoring: {
    Enabled: true || false
  }, */
  InstanceType: 'm3.medium', // this need to be configurable
  // KeyName: 'STRING_VALUE', // custom key pair, the pem file we will use to connect
  SecurityGroups: [
    'sg-8d7743e8' // this will be generated by the parent security group
  ]
};

autoscaling.createLaunchConfiguration(params, function(err, data) {
  if (err) { return console.log(err, err.stack); } // an error occurred

  var params = {
    LaunchConfigurationNames: [
      launchName
    ],
    MaxRecords: 1
  };

  autoscaling.describeLaunchConfigurations(params, function(err, data) {
    if (err) { return console.log(err, err.stack); } // an error occurred
    console.log('launch configuration created', JSON.stringify(data, null, 2))

    var params = {
      AutoScalingGroupName: groupName,
      MaxSize: 3, /* required */
      MinSize: 1,
      // not needed if VPC is defined
      //AvailabilityZones: [
      //  'us-west2a' // we must get this from the specific field
      //],
      //DefaultCooldown: 0, // optional, we must get it from specific
      //DesiredCapacity: 0, // optional, we must get it from specific
      HealthCheckGracePeriod: 3 * 60, // three minutes, might be 5?
      HealthCheckType: 'ELB', // EC2 if a parent ELB could not be found
      LaunchConfigurationName: launchName,
      LoadBalancerNames: [
        'autoscalingTest',
      ],
      Tags: [
        {
          Key: 'nscale-id', /* required */
          PropagateAtLaunch: false, // the id is only for the group
          Value: groupName + '-aaarg'
        },
        {
          Key: 'nscale-system', /* required */
          PropagateAtLaunch: true, // all instances are part of this
          Value: 'sudc-autoscaling'
        },
        {
          Key: 'nscale-parent-group', /* required */
          PropagateAtLaunch: true, // the id is only for the group
          Value: groupName
        }
      ],
      VPCZoneIdentifier: config.defaultSubnetId
    };
    autoscaling.createAutoScalingGroup(params, function(err, data) {
      if (err) { return console.log(err, err.stack); } // an error occurred

      var params = {
        AutoScalingGroupNames: [
          groupName
        ],
        MaxRecords: 1
      };
      autoscaling.describeAutoScalingGroups(params, function(err, data) {
        if (err) { return console.log(err, err.stack); } // an error occurred

        console.log('Autoscaling group created', JSON.stringify(data, null, 2));
      });
    });
  });
});
