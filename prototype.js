'use strict';

var aws = require('aws-sdk');
var config =  require('./config.json');
var autoscaling = new aws.AutoScaling(config);
var launchName = 'lc-sudc-42';
var groupName = 'ag-sudc-42';
var async = require('async');

var createLaunchConfigurationParams = {
  LaunchConfigurationName: launchName,
  ImageId: 'ami-4b90b27b',  // this need to be configurable

  InstanceType: 'm3.medium', // this need to be configurable
  SecurityGroups: [
    'sg-d6eaa5e5' // this will be generated by the parent security group
  ]
};

var describeLaunchConfigurationParams = {
  LaunchConfigurationNames: [
    launchName
  ],
  MaxRecords: 1
};

var createAutoscalingGroupParams = {
  AutoScalingGroupName: groupName,
  MaxSize: 3, /* required */
  MinSize: 1,
  // not needed if VPC is defined
  //AvailabilityZones: [
  //  'us-west2a' // we must get this from the specific field
  //],
  //DefaultCooldown: 0, // optional, we must get it from specific
  //DesiredCapacity: 0, // optional, we must get it from specific
  HealthCheckGracePeriod: 3 * 60, // three minutes, might be 5?
  HealthCheckType: 'ELB', // EC2 if a parent ELB could not be found
  LaunchConfigurationName: launchName,
  LoadBalancerNames: [
    'autoscalingTest-PleaseDeleteMe',
  ],
  Tags: [
    {
      Key: 'nscale-id', /* required */
      PropagateAtLaunch: false, // the id is only for the group
      Value: groupName + '-aaarg'
    },
    {
      Key: 'nscale-system', /* required */
      PropagateAtLaunch: true, // all instances are part of this
      Value: 'sudc-autoscaling'
    },
    {
      Key: 'nscale-parent-group', /* required */
      PropagateAtLaunch: true, // the id is only for the group
      Value: groupName
    }
  ],
  VPCZoneIdentifier: config.defaultSubnetId
};


var describeAutoScalingGroupsParams = {
  AutoScalingGroupNames: [
    groupName
  ],
  MaxRecords: 1
};

async.series([
  function createLaunchConfiguration (cb) {
    autoscaling.createLaunchConfiguration(createLaunchConfigurationParams, cb);
  },
  function describeLaunchConfiguration (cb) {
    autoscaling.describeLaunchConfigurations(describeLaunchConfigurationParams, cb);
  },
  function createAutoscalingGroup (cb) {
    autoscaling.createAutoScalingGroup(createAutoscalingGroupParams, cb);
  },
  function describeAutoscalingGroup (cb) {
    autoscaling.describeAutoScalingGroups(describeAutoScalingGroupsParams, cb);
  }], function (err, cb) {
    if (err) {
      return console.log(err, err.stack);
    }
    console.log("Everything DONE!!!");
  }
);

